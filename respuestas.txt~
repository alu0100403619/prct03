Alu3670

18. Es el resultado de la expresion puts.
puts 'Hello wrold'
Hello wrold
=> nil

21. Permite interpolar cadenas:
>> puts "\thola\nmundo"
    hola
mundo

Cadenas sin interppolar:
>>puts '\thola\nmundo'
"\thola\nmundo"
=>nil

22. Te permite indicar que la cadena no se interpola.
%q{hello world}
=> "hello world"
%q{'a' 'b' 'c'}
=> "'a' 'b' 'c'"

23. Te permite indicar que la cadena se interpola.
%Q{hello world}
=> "hello world"
%Q{"a" "b" "c"}
=> "\"a\" \"b\" \"c\""

24. En c queda la cadena interpolada que va entre las etiquietas HERE
c = <<HERE
irb(main):026:0" --#{a}--
irb(main):027:0" --#{b}--
irb(main):028:0" HERE
=> "--4--\n--2--\n"

25.En c queda la cadena sin interpolar que va entre las etiquietas HERE
c = <<'HERE'
irb(main):026:0" --#{a}--
irb(main):027:0" --#{b}--
irb(main):028:0" HERE
=> "--\#{a}--\n--\#{b}--\n"

26. Indica la posicion de comienzo y el numero de caracteres que coje
s = "Hello"
=> "Hello"
irb(main):034:0> s[0, 2]
=> "He"
irb(main):035:0> s[-1, 1]
=> "o"
irb(main):036:0> s[0, 10]
=> "Hello"

27. Queda el resultado de concatenar las dos cadenas, permite añadir cadenas al final.
g = "hello"
=> "hello"
irb(main):038:0> g << " world"
=> "hello world"

28. Repite tres veces la cadena.
e = '.'*3
=> "..."

29. Uvalua la expresion y despues repite el resultado tres veces.
"#{a=a+1}"*3
=> "222"

30. Convierte la cadena en un array separando los elementos por palabras.
%w[this is a test]
=> ["this", "is", "a", "test"]

31. No interpola las cadenas
%w[\t \n]
=> ["\\t", "\\n"]

32. Interpola las cadenas
puts %W[\t \n]
  

=> nil
irb(main):047:0> puts %W[\th \np]
  h

p
=> nil

33. Contiene un array de tres elementos que son nil.
nils = Array.new(3)
=> [nil, nil, nil]

34. Contiene un array de tres elementos que son cero, es decir te permite rellenar el array con el mismo elemneto
zeros = Array.new(3, 0)
=> [0, 0, 0]

35.En b queda una copia del elemento x
x = [[1, 2], [3, 4]]
=> [[1, 2], [3, 4]]
irb(main):051:0> b = Array.new(x)
=> [[1, 2], [3, 4]]

36. En c queda un array al que le pasamos un bloque que contiene una variable que es el indice del array multiplicado por 2.
c = Array.new(3) {|i| 2*i}
=> [0, 2, 4]

37. Permite seleccionar la posicion de inicio y la final, con el .. coge el elemento final y con ... no lo coge.
a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
irb(main):055:0> a[1, 1]
=> ["b"]
irb(main):056:0> a[-2, 2]
=> ["d", "e"]
irb(main):057:0> a[0..2]
=> ["a", "b", "c"]
irb(main):058:0> a[0...1]
=> ["a"]
irb(main):059:0> a[-2..-1]
=> ["d", "e"]

38. Permite sustituir con los elementos en las posiciones indicadas.
a
=> ["a", "b", "c", "d", "e"]
irb(main):061:0> a[0, 2] = %w{A B}
=> ["A", "B"]
irb(main):062:0> a
=> ["A", "B", "c", "d", "e"]
irb(main):063:0> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
irb(main):064:0> a
=> ["A", "B", "C", "D", "E"]
irb(main):065:0> a[0, 0] = [1, 2, 3]
=> [1, 2, 3]
irb(main):066:0> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
irb(main):067:0> a[0, 2] = []
=> []
irb(main):068:0> a
=> [3, "A", "B", "C", "D", "E"]
irb(main):069:0> a[-1, 1] = [ 'Z' ]
=> ["Z"]
irb(main):070:0> a
=> [3, "A", "B", "C", "D", "Z"]
irb(main):071:0> a[-2, 2] = nil
=> nil
irb(main):072:0> a
=> [3, "A", "B", "C"]

39. Permite añadir elementos al array, pero solo si el otro elemento es un array, es decir, concatena arrays.
a = (1...4).to_a
=> [1, 2, 3]
irb(main):074:0> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
irb(main):075:0> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
irb(main):076:0> a = a + 9
TypeError: can't convert Fixnum into Array
  from (irb):76:in `+'
  from (irb):76
  from :0

40. Permite eliminar elementos del array.
x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
irb(main):078:0> x = x - %w{b c d}
=> ["a", "a"]

41. Array de 8 ceros
z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42