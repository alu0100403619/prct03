Nombre: Gonzalo J. García Martín
Alu: 3670

18. Es el resultado de la expresion puts.
puts 'Hello wrold'
Hello wrold
=> nil

21. Permite interpolar cadenas:
>> puts "\thola\nmundo"
    hola
mundo

Cadenas sin interppolar:
>>puts '\thola\nmundo'
"\thola\nmundo"
=>nil

22. Te permite indicar que la cadena no se interpola.
%q{hello world}
=> "hello world"
%q{'a' 'b' 'c'}
=> "'a' 'b' 'c'"

23. Te permite indicar que la cadena se interpola.
%Q{hello world}
=> "hello world"
%Q{"a" "b" "c"}
=> "\"a\" \"b\" \"c\""

24. En c queda la cadena interpolada que va entre las etiquietas HERE
c = <<HERE
irb(main):026:0" --#{a}--
irb(main):027:0" --#{b}--
irb(main):028:0" HERE
=> "--4--\n--2--\n"

25.En c queda la cadena sin interpolar que va entre las etiquietas HERE
c = <<'HERE'
irb(main):026:0" --#{a}--
irb(main):027:0" --#{b}--
irb(main):028:0" HERE
=> "--\#{a}--\n--\#{b}--\n"

26. Indica la posicion de comienzo y el numero de caracteres que coje
s = "Hello"
=> "Hello"
irb(main):034:0> s[0, 2]
=> "He"
irb(main):035:0> s[-1, 1]
=> "o"
irb(main):036:0> s[0, 10]
=> "Hello"

27. Queda el resultado de concatenar las dos cadenas, permite añadir cadenas al final.
g = "hello"
=> "hello"
irb(main):038:0> g << " world"
=> "hello world"

28. Repite tres veces la cadena.
e = '.'*3
=> "..."

29. Uvalua la expresion y despues repite el resultado tres veces.
"#{a=a+1}"*3
=> "222"

30. Convierte la cadena en un array separando los elementos por palabras.
%w[this is a test]
=> ["this", "is", "a", "test"]

31. No interpola las cadenas
%w[\t \n]
=> ["\\t", "\\n"]

32. Interpola las cadenas
puts %W[\t \n]
  

=> nil
irb(main):047:0> puts %W[\th \np]
  h

p
=> nil

33. Contiene un array de tres elementos que son nil.
nils = Array.new(3)
=> [nil, nil, nil]

34. Contiene un array de tres elementos que son cero, es decir te permite rellenar el array con el mismo elemneto
zeros = Array.new(3, 0)
=> [0, 0, 0]

35.En b queda una copia del elemento x
x = [[1, 2], [3, 4]]
=> [[1, 2], [3, 4]]
irb(main):051:0> b = Array.new(x)
=> [[1, 2], [3, 4]]

36. En c queda un array al que le pasamos un bloque que contiene una variable que es el indice del array multiplicado por 2.
c = Array.new(3) {|i| 2*i}
=> [0, 2, 4]

37. Permite seleccionar la posicion de inicio y la final, con el .. coge el elemento final y con ... no lo coge.
a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
irb(main):055:0> a[1, 1]
=> ["b"]
irb(main):056:0> a[-2, 2]
=> ["d", "e"]
irb(main):057:0> a[0..2]
=> ["a", "b", "c"]
irb(main):058:0> a[0...1]
=> ["a"]
irb(main):059:0> a[-2..-1]
=> ["d", "e"]

38. Permite sustituir con los elementos en las posiciones indicadas.
a
=> ["a", "b", "c", "d", "e"]
irb(main):061:0> a[0, 2] = %w{A B}
=> ["A", "B"]
irb(main):062:0> a
=> ["A", "B", "c", "d", "e"]
irb(main):063:0> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
irb(main):064:0> a
=> ["A", "B", "C", "D", "E"]
irb(main):065:0> a[0, 0] = [1, 2, 3]
=> [1, 2, 3]
irb(main):066:0> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
irb(main):067:0> a[0, 2] = []
=> []
irb(main):068:0> a
=> [3, "A", "B", "C", "D", "E"]
irb(main):069:0> a[-1, 1] = [ 'Z' ]
=> ["Z"]
irb(main):070:0> a
=> [3, "A", "B", "C", "D", "Z"]
irb(main):071:0> a[-2, 2] = nil
=> nil
irb(main):072:0> a
=> [3, "A", "B", "C"]

39. Permite añadir elementos al array, pero solo si el otro elemento es un array, es decir, concatena arrays.
a = (1...4).to_a
=> [1, 2, 3]
irb(main):074:0> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
irb(main):075:0> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
irb(main):076:0> a = a + 9
TypeError: can't convert Fixnum into Array
  from (irb):76:in `+'
  from (irb):76
  from :0

40. Permite eliminar elementos del array.
x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
irb(main):078:0> x = x - %w{b c d}
=> ["a", "a"]

41. Array de 8 ceros
z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42. Nos permite añadir elementos a un array.
a = []
=> []
irb(main):002:0> a << 1
=> [1]
irb(main):003:0> a << 2 << 3
=> [1, 2, 3]
irb(main):004:0> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
irb(main):005:0> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43. Nos permite usar operadores lógicos y de conjuntos.
a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
irb(main):007:0> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
irb(main):008:0> c = a | b
=> [1, 2, 3, 4, 5]
irb(main):009:0> d = b | a
=> [5, 4, 3, 2, 1]
irb(main):010:0> e = a & b
=> [2, 3, 4]
irb(main):011:0> f = b & a
=> [4, 3, 2]

44. Nos permite manejar rangos
a = 1..10
=> 1..10
irb(main):013:0> a.class
=> Range
irb(main):014:0> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
irb(main):015:0> b = 1...10
=> 1...10
irb(main):016:0> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
irb(main):017:0> b.include?10
=> false
irb(main):018:0> b.include?8
=> true
irb(main):019:0> b.step(2) {|x| print "#{x}"}
13579=> 1...10
irb(main):020:0> 1..3.to_a
(irb):20: warning: default `to_a' will be obsolete
ArgumentError: bad value for range
  from (irb):20
  from :0

45. Nos permite saber que numeros y miembros estan incluidos en el rango.
r = 0...100
=> 0...100
irb(main):022:0> r.member? 50
=> true
irb(main):023:0> r.include? 99.9
=> true
irb(main):024:0> r.member? 99.9
=> true

46. Nos permite manejar modificadores de sentencia
true.class
=> TrueClass
irb(main):029:0> false.class
=> FalseClass
irb(main):030:0> puts "hello" if 0
hello
=> nil
irb(main):031:0> puts "hello" if nill
NameError: undefined local variable or method `nill' for main:Object
  from (irb):31
  from :0
irb(main):032:0> puts "hello" if ""
(irb):32: warning: string literal in condition
hello
=> nil

47. Nos permite manejar symbolos.
x = :sym
=> :sym
irb(main):034:0> x.class
=> Symbol
irb(main):035:0> x == 'sym'
=> false
irb(main):036:0> x == :sym
=> true
irb(main):038:0> z = :'a long symbol'
=> :"a long symbol"
irb(main):039:0> z.class
=> Symbol
irb(main):040:0> x == 'sym'.to_sym
=> true
irb(main):041:0> x.to_s == 'sym'
=> true

48. No spermite manejar cadenas.
s = "Ruby"
=> "Ruby"
irb(main):004:0> t = s
=> "Ruby"
irb(main):005:0> t[-1] = ""
=> ""
irb(main):006:0> print s
Rub=> nil
irb(main):007:0> t = "Java"
=> "Java"
irb(main):008:0> print s, t
RubJava=> nil

49. Nos permite formatear cadenas.
"%d %s" % [3, "Rubies"]
=> "3 Rubies"

50. Nos permite asignarle valor a varias variables en una sola linea.
x, y = 4, 5
=> [4, 5]
irb(main):013:0> z = x > y ? x : y
=> 5
irb(main):014:0> x, y, z = [1, 2, 3]
=> [1, 2, 3]

51. Permite manipular hashes.
x = { :a => 1, :b => 2}
=> {:b=>2, :a=>1}
irb(main):016:0> x.keys
=> [:b, :a]
irb(main):017:0> x.values
=> [2, 1]
irb(main):018:0> x[:c] = 3
=> 3
irb(main):019:0> x
=> {:b=>2, :c=>3, :a=>1}
irb(main):020:0> x.delete('a')
=> nil
irb(main):021:0> x
=> {:b=>2, :c=>3, :a=>1}
irb(main):022:0> x.delete(:a)
=> 1
irb(main):023:0> x
=> {:b=>2, :c=>3}
irb(main):024:0> x = { :a => 1, :b => 2, :c => 4}
=> {:b=>2, :c=>4, :a=>1}
irb(main):025:0> x.delete_if{ |k, v| v % 2 == 0 }
=> {:a=>1}
irb(main):026:0> x
=> {:a=>1}

52. yield 4, 5; le pasa los valores 4 y 5 respectivamente como argumentos al bloque. En el bloque se debe indicar que va a recibir dos variables.

53. Esta sentencia crea una hash con 0 elementos.
counts = Hash.new(0)
=> {}
Crea un Hash sin elementos.
count = {}
=> {}
La única diferencia es el método usado para crear el hash, en la primera se usa el método new pidiendo memoria y en la segunda se usa un constructor de copia.

54. Devuelve un array con todos los elementos que casen con la expresión regular.
'Hello world, hello LPP'.scan /\w+/
=> ["Hello", "world", "hello", "LPP"]

55. Primero crea un hash y despues lo intenta ordenar por las claves, pero como son symbolos no puede, sin embargo si se hace con cadenas si se puede.
c = { :a => 3, :b => 2, :c => 1}
=> {:b=>2, :c=>1, :a=>3}
irb(main):037:0> c.keys.sort.each { |k| puts c[k] }
NoMethodError: undefined method `<=>' for :b:Symbol
  from (irb):37:in `sort'
  from (irb):37
  from :0
irb(main):038:0> c.values.sort.each { |k| puts c[k] }
nil
nil
nil
=> [1, 2, 3]
d = { 'e' => 3, 'a' => 2, 'h' => 1}
=> {"h"=>1, "a"=>2, "e"=>3}
irb(main):044:0> d.keys.sort.each { |k| puts c[k]}
nil
nil
nil
=> ["a", "e", "h"]
irb(main):045:0> d.values.sort.each { |k| puts c[k]}
nil
nil
nil
=> [1, 2, 3]